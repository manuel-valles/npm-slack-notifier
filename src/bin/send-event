#!/usr/bin/env node

/** 
 * Example CURL:
    curl -XPOST \
    -H "Content-Type: application/json" \
    -H "x-npm-signature: sha256=555de877c536848f3aaead79353c88a610668575c546e31aa8c6c7fd8241cb12" \
    -d '{"event":"package:publish","name":"@kafkajs/zstd","version":"1.0.0","hookOwner":{"username":"nevon"},"payload":{"name":"@kafkajs/zstd"},"change":{"version":"1.0.0"},"time":1603444214995}' \
    http://localhost:3000/hook
 * */

const http = require('http');
const path = require('path');
const fs = require('fs');
const crypto = require('crypto');

const url = process.argv[2];
const secret = process.argv[3];
const payloadPath = 'src/fixtures/payload.json';

const help = () => {
  console.log(
    `Please provide the url and secret. For example: 'node ./src/bin/send-event http://localhost:3000/hook super-secret-string'`
  );
};

if (!url || !secret) {
  help();
  process.exit(1);
}

const file = fs.readFileSync(payloadPath);

const signature = crypto
  .createHmac('sha256', secret)
  .update(file)
  .digest('hex');

const send = async () => {
  return new Promise((resolve, reject) => {
    const req = http.request(
      url,
      {
        headers: {
          'Content-Type': 'application/json',
          'x-npm-signature': `sha256=${signature}`,
        },
        method: 'POST',
      },
      (res) => {
        if (res.statusCode >= 400) {
          reject(
            new Error(
              `Server returned statusCode ${res.statusCode}: ${res.statusMessage}`
            )
          );
        } else {
          res.setEncoding('utf-8');
          let body = '';
          res.on('data', (chunk) => (body += chunk));
          res.on('end', () => {
            console.log(body);
            resolve();
          });
        }
      }
    );

    req.on('error', (error) => {
      reject(error);
    });

    req.write(file);

    req.end();
  });
};

send()
  .then(() => {
    process.exit(0);
  })
  .catch((error) => {
    console.error('Error making request', error);
    process.exit(1);
  });
